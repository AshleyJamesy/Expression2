@name library/table
@persist LIB_TABLE_NOTABLE:table

if(first() | dupefinished()) {
    LIB_TABLE_NOTABLE = table()
}

function table notable() {
    return LIB_TABLE_NOTABLE
}

function table table:shuffle() {
    local Clone = This:clone()
    local TypeIds = Clone:typeidsArray()
    This:clear()
    
    for(_ = 1, Clone:count()) {
        local R = randint(1, Clone:count())
        switch(TypeIds[R, string]) {
            case "a",
                This:pushAngle(Clone:removeAngle(R))
            break
            case "r",
                This:pushArray(Clone:removeArray(R))
            break
            case "b",
                This:pushBone(Clone:removeBone(R))
            break
            case "c",
                This:pushComplex(Clone:removeComplex(R))
            break
            case "xdm",
                This:pushDamage(Clone:removeDamage(R))
            break
            case "e",
                This:pushEntity(Clone:removeEntity(R))
            break
            case "m",
                This:pushMatrix(Clone:removeMatrix(R))
            break
            case "xm2",
                This:pushMatrix2(Clone:removeMatrix2(R))
            break
            case "xm4",
                This:pushMatrix4(Clone:removeMatrix4(R))
            break
            case "n",
                This:pushNumber(Clone:removeNumber(R))
            break
            case "q",
                This:pushQuaternion(Clone:removeQuaternion(R))
            break
            case "xrd",
                This:pushRanger(Clone:removeRanger(R))
            break
            case "s",
                This:pushString(Clone:removeString(R))
            break
            case "t",
                This:pushTable(Clone:removeTable(R))
            break
            case "v",
                This:pushVector(Clone:removeVector(R))
            break
            case "xv2",
                This:pushVector2(Clone:removeVector2(R))
            break
            case "xv4",
                This:pushVector4(Clone:removeVector4(R))
            break
            case "xwl",
                This:pushWirelink(Clone:removeWirelink(R))
            break
        }
    }
    
    return This
}

function table table:findTable(Method:function) {
    foreach(K:number, Table:table = This) {
        if(Method(Table, K)[number]) {
            return Table
        }
    }
    return notable()
}

function table table:filter(Method:function) {
    local T = table()
    foreach(K:number, Table:table = This) {
        if(Method(Table, K)[number]) {
            T:pushTable(Table)
        }
    }
    return T
}
