#include "library/egp"
#include "library/egp/5.0/event"
#include "library/egp/5.0/input"
#include "library/egp/5.0/draw"

if(first() || dupefinished()) {
    function number table:egpMouseOver(Cursor:vector2) {
        return inrange(Cursor, This:egpPos(), This:egpPos() + This:egpSize())
    }
    
    egpWire()
}

if(egpScreenChanged()) {
    egpScreen():egpClear()
    egpScreen():egpDrawTopLeft(1)
    
    egpInputClear()
    egpEventClear()
    
    if(egpScreen():entity():type() == "gmod_wire_egp_hud") {
        egpDrawClear(egpScrW(owner()), egpScrH(owner()))
    } else {
        egpDrawClear(512, 512)
    }
    
    egpInputEvent("document.ready")
}

if(egpEventPollClk()) {
    if(egpDrawQueue():count() > 0) {
        while(egpDrawQueue():count() > 0 && perf(99)) {
            egpDrawQueue():popTable():egpProcessDraw()
        }
        egpEventPoll() #poll again
    } else {
        if(egpEventQueue():count() > 0) {
            egpEventQueue():popTable():egpProcessEvent()
            if(egpEventQueue():count() > 0) {
                egpEventPoll()  #poll again
            }
        }
    }
}

if(egpEventClk()) {
    if(egpEventClk("hud.open")) {
        if(egpBody():egpValid()) {
            local Body = egpBody()
            Body["properties", table]["position", table] = table(
                "x" = "50%",
                "y" = "50%"
            )
            Body:egpDraw()
        }
    }
    
    if(egpEventClk("hud.close")) {
        local Body = egpBody()
            Body["properties", table]["position", table] = table(
                "x" = 9999,
                "y" = 9999
            )
            Body:egpDraw()
    }
    
    if(egpEventClk("keyboard.press")) {
        egpEventDelay("keyboard.hold", egpEventData(), 150)
    }
    
    if(egpEventClk("keyboard.hold")) {
        local Event = egpEventData()
        local KeyCode = Event["key", number]
        
        if(EGP_KEYBOARD_MEMORY == KeyCode) {
            egpEvent("keyboard.press", Event)
        }
    }
}

