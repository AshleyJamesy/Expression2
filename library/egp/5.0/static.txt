#include "library/egp"
#include "library/egp/5.0/event"
#include "library/egp/5.0/draw"

if(first() || dupefinished()) {
    function number table:egpMouseOver(Cursor:vector2) {
        return inrange(Cursor, This:egpPos(), This:egpPos() + This:egpSize())
    }
    
    egpWire()
}

if(egpScreenChanged()) {
    EGP_DEBUG = 0
    
    egpScreen():egpClear()
    egpScreen():egpDrawTopLeft(1)
    
    egpEventClear()
    
    if(egpScreen():entity():type() == "gmod_wire_egp_hud") {
        egpDrawClear(egpScrW(owner()), egpScrH(owner()))
    } else {
        egpDrawClear(512, 512)
    }
    
    egpEvent("document.ready", table(), 1)
}

if(egpEventPollClk() || EGP_DEBUG) {
    if(egpDrawQueue():count() > 0) {
        if(EGP_DEBUG) {
            if(egpDrawQueue():count() > 0) {
                local Event = egpDrawQueue():popTable()
                Event:egpProcessDraw()
            }
        } else {
            while(egpDrawQueue():count() > 0 && perf(99)) {
                local Event = egpDrawQueue():popTable()
                Event:egpProcessDraw()
            }
            egpEventPoll() #poll again
        }
    } else {
        if(egpEventQueue():count() > 0) {
            local Event = egpEventQueue():popTable()
            Event:egpProcessEvent()
            if(egpEventQueue():count() > 0) {
                egpEventPoll()  #poll again
            }
        }
    }
}
