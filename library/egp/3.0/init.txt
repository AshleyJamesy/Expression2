@persist EGP_FREE:array EGP_USED:array 
@persist EGP_QUEUE:table EGP_QUEUED:number
@persist EGP_BODY:table
@persist EGP_PATH:table

#include "library/number"
#include "library/string"
#include "library/array"
#include "library/table"
#include "library/egp"
#include "library/event/1.0/init"
#include "library/property"

if(first() || dupefinished()) {
    EGP_FREE = array()
    EGP_USED = array()
    EGP_QUEUE = table()
    EGP_QUEUED = 0
    EGP_BODY = table()
    EGP_PATH = table()
    
    #MEMORY:
    function number dNewId() {
        if(EGP_FREE:count() == 0) {
            local TOTAL = (EGP_FREE:count() + EGP_USED:count()) + 1
            
            if(TOTAL < egpMaxObjects()) {
                local ID = TOTAL
                EGP_USED:pushNumber(ID)
                return ID
            }
        } else {
            local ID = EGP_FREE:removeNumber(1)
            EGP_USED:pushNumber(ID)
            return ID
        }
        
        return -1
    }
    
    function void dFreeId(ID:number) {
        local LkupUsed = invert(EGP_USED)
        
        if(LkupUsed:exists(ID:toString())) {
            EGP_USED:removeNumber(LkupUsed[ID:toString(), number])
            EGP_FREE:pushNumber(ID)
            EGP_SCREEN:egpRemove(ID)
        }
    }
    
    #QUEUING:
    function void dEventQueue() {
        if(EGP_QUEUED == 0) {
            eEventPush("egp_queue", 1)
        }
        
        EGP_QUEUED = 1
    }
    
    function void dEventQueue(Type:string) {
        dEventQueue()
        EGP_QUEUE:pushTable(
            table("type" = Type)
        )
    }
    
    function void dEventQueue(Type:string, Event:table) {
        dEventQueue()
        EGP_QUEUE:pushTable(table("type" = Type, "event" = Event))
    }
    
    function void dEventQueueNext(Type:string, Event:table) {
        dEventQueue()
        EGP_QUEUE:insertTable(1, table("type" = Type, "event" = Event))
    }
    
    function number dEventQueueClk() {
        return eEventClk("egp_queue")
    }
    
    function number dEventProcessing() {
        return EGP_QUEUE:count() > 0
    }
    
    #HELPERS:
    function number dValue(Value:number, _:number) {
        return Value
    }
    
    function number dValue(Value:string, Max:number) {
        local Absolute = Value:match("^(-*%d+)$")
        if(Absolute[1, string] == "") {
            Absolute = Value:match("^(-*%d+)px$")
        }
        
        if(Absolute[1, string] != "") {
            return Absolute[1, string]:toNumber()
        }
        
        local Percent = Value:match("^(-*%d+)%%$")
        if(Percent[1, string] == "") {
            Percent = Value:match("^(-*%d+%.%d+)%%$")
        }
        
        if(Percent[1, string] != "") {
            return (Percent[1, string]:toNumber() / 100) * Max
        }
        
        return 0
    }
    
    function number table:dId() {
        return This["id", number]
    }
    
    function table table:dParent() {
        if(!This:exists("parent")) {
            error("element has no parent")
        }
        
        return This["parent", table]
    }
    
    function string table:dPath() {
        return This["path", string]
    }
    
    function number table:dIndex() {
        return This["index", number]
    }
    
    function string table:dName() {
        return This["name", string]
    }
    
    function table dBody() {
        return EGP_BODY
    }
    
    function void table:dDirty() {
        if(This["dirty", number] == 1) {
            return
        }
        
        dEventQueue("draw", table(
            "target" = This
        ))
        This["dirty", number] = 1
    }
    
    function vector2 table:dPos() {
        return This["position", vector2]
    }
    
    function table:dPos(Position:vector2) {
        This["properties", table]["position", vector2] = Position
        This:dDirty()
    }
    
    function table:dPos(Position:table) {
        This["properties", table]["position", table] = Position
        This:dDirty()
    }
    
    function vector2 table:dSize() {
        return This["size", vector2]
    }
    
    function table:dSize(Size:vector2) {
        This["properties", table]["size", vector2] = Size
        This:dDirty()
    }
    
    function table:dSize(Size:table) {
        This["properties", table]["size", table] = Size
        This:dDirty()
    }
    
    function void table:dColour(Colour:vector4) {
        local Id = This["id", number]
        EGP_SCREEN:egpColor(Id, Colour)
        This["properties", table]["colour", vector4] = Colour
    }
    
    function void table:dText(Text:string) {
        local Id = This["id", number]
        EGP_SCREEN:egpSetText(Id, Text)
        This["properties", table]["text", string] = Text
    }
    
    function table dGet(Path:string) {
        if(!EGP_PATH:exists(Path)) {
            error("element('" + Path + "') not found")
        }
        
        return EGP_PATH[Path, table]
    }
    
    function table table:dCopy() {
        return This["properties", table]:clone()
    }
    
    function table table:dChildren() {
        return This["children", table]["index", table]
    }
    
    function table table:dGetChild(I:number) {
        local Children = This["children", table]["index", table]
        if(!Children:exists(I)) {
            error("child(" + I + ") not found in element")
        }
        
        return Children[I, table]
    }
    
    function table table:dGetChild(Name:string) {
        local Children = This["children", table]["name", table]
        if(!Children:exists(Name)) {
            error("child(" + Name + ") not found in element")
        }
        
        return Children[Name, table]
    }
    
    function table table:dGetChildFirst() {
        try {
            return This:dGetChild(1)
        } catch(_) {
            error("child(first) not found in element")
        }
    }
    
    function table table:dGetChildLast() {
        local Children = This["children", table]["index", table]
        try {
            return This:dGetChild(Children:count())
        } catch(_) {
            error("child(last) not found in element")
        }
    }
    
    function void table:dAdd(Properties:table) {
        dEventQueue("add", table(
            "parent" = This,
            "properties" = Properties
        ))
    }
    
    function void table:dReplace(Properties:table) {
        dEventQueue("replace", table(
            "target" = This,
            "properties" = Properties
        ))
    }
    
    function void table:dRemove() {
        dEventQueue("remove", table(
            "target" = This,
            "remove" = 0
        ))
    }
    
    #TODO: classes
    function table:dList(List:table, Method:string, Max:number, Start:number) {
        if(This:dChildren():count() > List:count()) {
            for(I = This:dChildren():count(), List:count() + 1, -1) {
                This:dGetChild(I):dRemove()
            }
        }
        
        for(I = 1, min(List:count(), Max)) {
            local ListItem = List[(Start - 1) + I, table]
            
            if(I <= This:dChildren():count()) {
                Method(This:dGetChild(I), ListItem, I, List)[table]
            } else {
                This:dAdd(Method(notable(), ListItem, I, List)[table])
            }
        }
    }
    
    function number table:dHovering(Cursor:vector2) {
        return inrange(Cursor, This:dPos(), This:dPos() + This:dSize())
    }
    
    function void dCallback(Name:string) {
        dEventQueue("callback", table(
            "name" = Name,
            "data" = table()
        ))
    }
    
    function void dCallback(Name:string, Data:table) {
        dEventQueue("callback", table(
            "name" = Name,
            "data" = Data
        ))
    }
    
     function void table:dProperties() {
        local TypeIds = This:typeids()
        
        local Type = This:dProperty(TypeIds, "type", "box", 0)
        This:dProperty(TypeIds, "name", Type, 0)
        
        if(!This:exists("position")) {
            This:dProperty(TypeIds, "position", vec2(), 0)
        } else {
            if(TypeIds["position", string] == "t") {
                This:dProperty(TypeIds, "position", table("x" = 0, "y" = 0), 0)
            } elseif(TypeIds["position", string] != "xv2") {
                This:dProperty(TypeIds, "position", vec2(), 0)
            }
        }
        
        if(!This:exists("size")) {
            This:dProperty(TypeIds, "size", table("width" = "100%", "height" = "100%"), 0)
        } else {
            if(TypeIds["size", string] == "t") {
                This:dProperty(TypeIds, "size", table("width" = "100%", "height" = "100%"), 0)
            } elseif(TypeIds["size", string] != "xv2") {
                This:dProperty(TypeIds, "size", vec2(), 0)
            }
        }
        
        This:dProperty(TypeIds, "colour", vec4(), 0)
        This:dProperty(TypeIds, "angle", 0, 0)
        This:dProperty(TypeIds, "rounded", 0, Type != "box")
        This:dProperty(TypeIds, "outline", 0, Type != "box" && Type != "circle")
        This:dProperty(TypeIds, "thickness", 0, Type != "box" && Type != "circle")
        This:dProperty(TypeIds, "material", "", Type != "box")
        
        This:dProperty(TypeIds, "text", "", Type != "text")
        This:dProperty(TypeIds, "font", table("font" = "", "size" = 18), Type != "text")
        This:dProperty(TypeIds, "align", vec2(0,0), Type != "text")
    }
    
    function void table:dDraw() {
        local Id = This["id", number]
        if(!This["id", number]) {
            Id = dNewId()
        }
        
        This["dirty", number] = 0
        
        local Properties = This["properties", table]
        Properties:dProperties()
        
        local Type = Properties["type", string]
        local Name = Properties["name", string]
        
        if(!EGP_SCREEN:egpHasObject(Id) || (EGP_SCREEN:egpHasObject(Id) && EGP_SCREEN:egpObjectType(Id) != Type)) {
            switch(Type) {
                case "box",
                    local Outline = Properties["outline", number]
                    local Rounded = Properties["rounded", number]
                    
                    if(Outline && Rounded) {
                        EGP_SCREEN:egpRoundedBoxOutline(Id, vec2(), vec2())
                    } elseif(Rounded) {
                        EGP_SCREEN:egpRoundedBox(Id, vec2(), vec2())
                    } elseif(Outline) {
                        EGP_SCREEN:egpBoxOutline(Id, vec2(), vec2())
                    } else {
                        EGP_SCREEN:egpBox(Id, vec2(), vec2())
                    }
                break
                case "circle",
                    local Outline = Properties["outline", number]
                    
                    if(Outline) {
                        EGP_SCREEN:egpCircleOutline(Id, vec2(), vec2())
                    } else {
                        EGP_SCREEN:egpCircle(Id,vec2(), vec2())
                    }
                break
                case "text",
                    EGP_SCREEN:egpTextLayout(Id, "", vec2(), vec2())
                break
            }
        }
        
        #name changed, need to update paths
        if(This["name", string] != "" && This["name", string] != Name) {
            #TODO: update all children
            This["name", string] = Name
        }
        
        if(This["name", string] == "" || This["name", string] != Name) {
            This["name", string] = Name
        }
        
        local ParentId = 0
        try {
            local Parent = This:dParent()
            ParentId = Parent:dId()
            
            local ChildrenByName = Parent["children", table]["name", table]
            ChildrenByName[Name, table] = This
            
            if(Name != "") {
                local Path = (Parent["path", string] == "" ? "" : Parent["path", string] + ".") + Parent["name", string]
                if(This["path", string] != "") {
                    if(EGP_PATH:exists(This["path", string])) {
                        if(This["path", string] != Path) {
                            EGP_PATH:removeTable(This["path", string])
                        }
                    }
                }
                
                This["path", string] = Path
                
                local FullPath = Path + "." + Name
                EGP_PATH[FullPath, table] = This
            }
            
            if(EGP_SCREEN:egpParent(Id) != ParentId) {
                EGP_SCREEN:egpParent(Id, ParentId)
            }
        } catch(_) {}
        
        local TypeIds = Properties:typeids()
        
        #POSITION ------------------------------------------------------------------------:
        local X = 0
        local Y = 0
        
        if(ParentId > 0) {
            local ParentSize = EGP_SCREEN:egpSize(ParentId)
            
            if(TypeIds["position", string] == "xv2") {
                local Position = Properties["position", vector2]
                X = Position:x()
                Y = Position:y()
            } elseif(TypeIds["position", string] == "t") {
                local PositionData = Properties["position", table]
                local PositionTypeIds = PositionData:typeids()
                X = PositionTypeIds["x", string] == "n" ? dValue(PositionData["x", number], 512) : dValue(PositionData["x", string], ParentSize:x())
                Y = PositionTypeIds["y", string] == "n" ? dValue(PositionData["y", number], 512) : dValue(PositionData["y", string], ParentSize:y())
            }
            
            local Parent = This:dParent()
            This["position", vector2] = Parent["position", vector2] + vec2(X, Y)
            
            #offset final position from parent's center
            X -= ParentSize:x() / 2
            Y -= ParentSize:y() / 2
        } else {
            if(TypeIds["position", string] == "xv2") {
                local Position = Properties["position", vector2]
                X = Position:x()
                Y = Position:y()
            } elseif(TypeIds["position", string] == "t") {
                local PositionData = Properties["position", table]
                local PositionTypeIds = PositionData:typeids()
                X = PositionTypeIds["x", string] == "n" ? dValue(PositionData["x", number], 512) : dValue(PositionData["x", string], 512)
                Y = PositionTypeIds["y", string] == "n" ? dValue(PositionData["y", number], 512) : dValue(PositionData["y", string], 512)
            }
            
            This["position", vector2] = vec2(X, Y)
        }
        EGP_SCREEN:egpPos(Id, vec2(X, Y))
        
        #SIZE ------------------------------------------------------------------------:
        local SizeData = Properties["size", table]
        local W = 0
        local H = 0
        local PW = 512
        local PH = 512
        
        if(ParentId > 0) {
            local ParentSize = EGP_SCREEN:egpSize(ParentId)
            PW = ParentSize:x()
            PH = ParentSize:y()
        }
        
        if(TypeIds["size", string] == "xv2") {
            local Size = Properties["size", vector2]
            W = Size:x()
            H = Size:y()
        } elseif(TypeIds["size", string] == "t") {
            local SizeTypesIds = SizeData:typeids()
            W = SizeTypesIds["width", string] == "n" ? dValue(SizeData["width", number], 512) : dValue(SizeData["width", string], PW)
            H = SizeTypesIds["height", string] == "n" ? dValue(SizeData["height", number], 512) : dValue(SizeData["height", string], PH)
        }
        
        This["size", vector2] = vec2(W, H)
        EGP_SCREEN:egpSize(Id, vec2(W, H))
        
        #COLOUR ------------------------------------------------------------------------:
        local Colour = Properties["colour", vector4]
        EGP_SCREEN:egpColor(Id, Colour)
        
        #ANGLE
        local Angle = Properties["angle", number]
        EGP_SCREEN:egpAngle(Id, Angle)
        
        #TEXT ------------------------------------------------------------------------:
        if(Type == "text") {
            local Font = Properties["font", table]["font", string]
            local FontSize = Properties["font", table]["size", number]
            local Align = Properties["align", vector2]     
            
            EGP_SCREEN:egpSetText(Id, Properties["text", string])
            EGP_SCREEN:egpFont(Id, Font, FontSize > 0 ? FontSize : H)
            EGP_SCREEN:egpAlign(Id, Align:x(), Align:y())
        }
        
        #MATERIAL ------------------------------------------------------------------------:
        EGP_SCREEN:egpMaterial(Id, Properties["material", string])
        
        #THICKNESS ------------------------------------------------------------------------:
        if(Properties["outline", number] == 1 && Properties["thickness", number] > 0) {
            EGP_SCREEN:egpSize(Id, Properties["thickness", number])
        }
    }
    
    function number table:dEventProcess() {
        local Type = This["type", string]
        local Event = This["event", table]
        
        switch(Type) {
            case "add",
                local Properties = Event["properties", table]
                
                if(Event:exists("parent")) {
                    local Parent = Event["parent", table]
                    
                    local Children = Parent:dChildren()
                    local Object = table(
                        "parent" = Parent,
                        "id" = dNewId(),
                        "index" = Children:count() + 1,
                        "name" = "",
                        "path" = "",
                        "position" = vec2(0, 0),
                        "size" = vec2(0, 0),
                        "children" = table(
                            "index" = table(),
                            "name" = table()
                        ),
                        "remove" = 0,
                        "dirty" = 0,
                        "properties" = Properties
                    )
                    Children:pushTable(Object)
                    Object:dDraw()
                    EGP_QUEUE:remove(1)
                    
                    if(Properties:exists("children")) {
                        for(I = Properties["children", table]:count(), 1, -1) {
                            dEventQueueNext("add", table(
                                "parent" = Object,
                                "properties" = Properties["children", table][I, table]
                            ))
                        }
                        Properties:remove("children")
                    }
                    
                    return 0
                } else {
                    EGP_BODY = table(
                        "id" = dNewId(),
                        "index" = 1,
                        "name" = "",
                        "path" = "",
                        "position" = vec2(0, 0),
                        "size" = vec2(0, 0),
                        "children" = table(
                            "index" = table(),
                            "name" = table()
                        ),
                        "remove" = 0,
                        "dirty" = 0,
                        "properties" = Properties
                    )
                    EGP_BODY:dDraw()
                    eEventPush("document.ready", 0)
                }
            break
            case "replace",
                local Target = Event["target", table]
                
                if(Event["replace", number] == 1) {
                    local Properties = Event["properties", table]
                    Target["properties", table] = Properties
                    Target:dDraw()
                    EGP_QUEUE:remove(1)
                    
                    if(Properties:exists("children")) {
                        for(I = Properties["children", table]:count(), 1, -1) {
                            dEventQueueNext("add", table(
                                "parent" = Target,
                                "properties" = Properties["children", table][I, table]
                            ))
                        }
                        Properties:remove("children")
                    }
                    
                    return 0
                } else {
                    foreach(_:number, Child:table = Target:dChildren()) {
                        dEventQueueNext("remove", table(
                            "target" = Child,
                            "remove" = 0
                        ))
                    }
                    
                    Event["replace", number] = 1
                    return 0
                }
            break
            case "remove",
                local Target = Event["target", table]
                
                if(Event["remove", number] == 1) {
                    local Parent = Target:dParent()
                    local Children = Parent:dChildren()
                    Children:remove(Target:dIndex())
                    for(I = Target:dIndex(), Children:count()) {
                        Children[I, table]["index", number] = I
                    }
                    
                    local ChildrenByName = Parent["children", table]["name", table]
                    local Name = Target:dName()
                    if(Name != "") {
                        if(ChildrenByName:exists(Name)) {
                            ChildrenByName:remove(Name)
                        }
                    }
                    
                    local Path = Target:dPath() + "." + Target:dName()
                    if(EGP_PATH:exists(Path)) {
                        EGP_PATH:remove(Path)
                    }
                    
                    dFreeId(Target:dId())
                } else {
                    foreach(_:number, Child:table = Target:dChildren()) {
                        dEventQueueNext("remove", table(
                            "target" = Child,
                            "remove" = 0
                        ))
                    }
                    Event["remove", number] = 1
                    return 0
                }
            break
            case "draw",
                local Target = Event["target", table]
                Target:dDraw()
                EGP_QUEUE:remove(1)
                
                foreach(_:number, Child:table = Target:dChildren()) {
                    dEventQueueNext("draw", table(
                        "target" = Child
                    ))
                }
                return 0
            break
            case "callback",
                eEventPush(Event["name", string], Event["data", table])
                EGP_QUEUE:remove(1)
            return 1
            default,
                EGP_QUEUE:remove(1)
            return 0
        }
        
        EGP_QUEUE:remove(1)
        return 0
    }
    
    egpWire()
    
    dEventQueue("add", table(
        "properties" = table(
            "name" = "body",
            "type" = "box",
            "position" = vec2(0, 0),
            "size" = vec2(512, 512)
        )
    ))
}

#handles screen & emmiter presses
#fixes egp emitter issue
event keyPressed(Player:entity, Key:string, KeyPressed:number, KeyBind:string) {
    if(EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter") {
        if(!dEventProcessing()) {
            if(Player:pos():distance(EGP_SCREEN:entity():pos()) <= 150) {
                local CursorPos = EGP_SCREEN:egpCursor(Player)
                if(CursorPos:x() >= 0 && CursorPos:x() <= 512 && CursorPos:y() >= 0 && CursorPos:y() <= 512) {
                    if(KeyPressed == 1) {
                        if(KeyBind == "use" || (Player:inVehicle() && KeyBind == "attack")) {
                            eEventPush("mouse.press", 1, table(
                                "player" = Player,
                                "cursor" = EGP_SCREEN:egpCursor(Player)
                            ))
                        }
                    }
                }
            }
        }
    } elseif(EGP_SCREEN:entity():type() == "gmod_wire_egp_hud") {
        if(!dEventProcessing()) {
            if(Player == owner()) {
                if(Key == "c") {
                    if(KeyPressed) {
                        eEventPush("hud.open", 1)
                    } else {
                        eEventPush("hud.close", 1)
                    }
                }
                
                if(Player:weapon():type() == "keys") {
                    if(KeyBind == "attack" && KeyPressed == 1) {
                        eEventPush("mouse.press", 1, table(
                            "player" = Player,
                            "cursor" = owner():egpToScreen(owner():eye())
                        ))
                    }
                }
            }
        }
    }
}

if(EGP_SCREEN:entity():type() != "gmod_wire_egp_emitter") {
    if(EGP_USER & ~EGP_USER) {
        if(!dEventProcessing()) {
            if(EGP_USER:isValid() && EGP_USER:isPlayer()) {
                eEventPush("mouse.press", 1, table(
                    "player" = EGP_USER,
                    "cursor" = EGP_SCREEN:egpCursor(EGP_USER)
                ))
            }
        }
    }
}

#handles drawing so we don't exceed tickquota
if(dEventQueueClk()) {
    if(EGP_QUEUE:count() > 0) {
        while(EGP_QUEUE:count() > 0 && perf(99)) {
            if(EGP_QUEUE[1, table]:dEventProcess()) {
                break
            }
        }
        
        EGP_QUEUED = 0
        dEventQueue()
    } else {
        EGP_QUEUED = 0
    }
    
    #[
    if(EGP_QUEUE:count() > 0) {
        EGP_QUEUE[1, table]:dEventProcess()
        
        EGP_QUEUED = 0
        dEventQueue()
    } else {
        EGP_QUEUED = 0
    }
    ]#
}
