@inputs EGP_SCREEN:wirelink EGP_USER:entity
@persist EGP_FREE:array EGP_USED:array EGP_NAME:table EGP_QUEUE:table EGP_REMOVE:table EGP_EVENT:table
@persist USER:entity

#include "library/number"
#include "library/string"
#include "library/array"
#include "library/event/0.1/init"

if(first()||dupefinished()) {
    EGP_FREE = array()
    EGP_USED = array()
    EGP_NAME = table()
    EGP_QUEUE = table()
    EGP_REMOVE = table()
    EGP_EVENT = table()
    USER = noentity()
    
    function void dWire() {
        findIncludePlayerProps(owner())
        findByClass("gmod_wire_egp*")
        findSortByDistance(entity():pos())
        
        if(find()) {   
            if(find():owner() == owner()) {
                if(!EGP_SCREEN:entity()) {
                    #ifdef entity:createWire(entity, string, string)
                    
                    local EGP = find()
                    entity():createWire(EGP, "EGP_SCREEN", "wirelink")
                    entity():createWire(EGP, "EGP_USER", "User")
                    
                    #endif
                }
            }
        }
        
        if(EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter") {
            timer(HASH + "egp_looking_at", 0)
        }
        
        EGP_SCREEN:egpClear()
        EGP_SCREEN:egpDrawTopLeft(1)
    }
    
    #MEMORY:
    function number dNewId() {
        if(EGP_FREE:count() == 0) {
            local TOTAL = (EGP_FREE:count() + EGP_USED:count()) + 1
            
            if(TOTAL < egpMaxObjects()) {
                local ID = TOTAL
                EGP_USED:insertNumber(EGP_USED:indexOf(ID)[2, number] + 1, ID) #ensures sorted
                return ID
            }
        } else {
            local ID = EGP_FREE:shiftNumber()
            EGP_USED:insertNumber(EGP_USED:indexOf(ID)[2, number] + 1, ID) #ensures sorted
            return ID
        }
        
        return -1
    }
    
    function number dNewId(Name:string) {
        local Id = dNewId()
        if(Id != -1) {
            EGP_NAME[Name, number] = Id
        }
        return Id
    }
    
    function number dGetId(Name:string) {
        if(EGP_NAME:exists(Name)) {
            return EGP_NAME[Name, number]
        }
        return -1
    }
    
    function void dFreeId(ID:number) {
        local F = EGP_USED:indexOf(ID)
        if(F[1, number] > 0) {
            EGP_USED:removeNumber(F[2, number])
            EGP_FREE:insertNumber(EGP_FREE:indexOf(ID)[2, number] + 1, ID) #ensures sorted
            EGP_SCREEN:egpRemove(ID)
        }
    }
    
    function void dFreeId(Name:string) {
        if(EGP_NAME:exists(Name)) {
            dFreeId(EGP_NAME[Name, number])
            EGP_NAME:removeNumber(Name)
        }
    }
    
    function vector2 wirelink:egpPosChild(Id:number) {
        local ParentId = This:egpParent(Id)
        if(ParentId > 0) {
            local Size = This:egpSize(ParentId) / 2
            return This:egpPos(Id) + Size
        } else {
            return This:egpPos(Id)
        }
    }
    
    function void wirelink:egpPosChild(Id:number, Pos:vector2) {
        local ParentId = This:egpParent(Id)
        if(ParentId > 0) {
            local Size = This:egpSize(ParentId) / 2
            This:egpPos(Id, Pos - Size)
        } else {
            This:egpPos(Id, Pos)
        }
    }
    
    function vector2 table:dPos() {
        return This["metadata", table]["position", vector2]
    }
    
    function vector2 table:dSize() {
        return This["metadata", table]["size", vector2]
    }
    
    #EVENTS:
    function entity dEventUser() {
        return USER
    }
    
    function vector2 dEventUserCursor() {
        return EGP_SCREEN:egpCursor(USER)
    }
    
    function table dEventTarget() {
        return eventGetPayload()
    }
    
    #QUEUING:
    function void dQueue() {
        foreach(_:number, Timer:string = getTimers()) {
            if(Timer == HASH + ":egp_draw_queue") {
                return
            }
        }
        
        timer(HASH + ":egp_draw_queue", 0)
    }
    
    function number dQueueClk() {
        return clk(HASH + ":egp_draw_queue")
    }
    
    function table dQueue(Object:table) {
        dQueue()
        EGP_QUEUE:pushTable(Object)
        return Object
    }
    
    function table dQueueAfter(Object:table) {
        dQueue()
        EGP_QUEUE:insertTable(1, Object)
        return Object
    }
    
    function table dQueueAfter(Object:table, K:number) {
        dQueue()
        EGP_QUEUE:insertTable(K, Object)
        return Object
    }
    
    function number dRendering() {
        return EGP_QUEUE:count() > 0
    }
    
    #HELPERS:
    function number dValue(Value:number, _:number) {
        return Value
    }
    
    function number dValue(Value:string, Max:number) {
        local Absolute = Value:match("^(-*%d+)$")
        if(Absolute[1, string] == "") {
            Absolute = Value:match("^(-*%d+)px$")
        }
        
        if(Absolute[1, string] != "") {
            return Absolute[1, string]:toNumber()
        }
        
        local Percent = Value:match("^(-*%d+)%%$")
        if(Percent[1, string] == "") {
            Percent = Value:match("^(-*%d+%.%d+)%%$")
        }
        
        if(Percent[1, string] != "") {
            return (Percent[1, string]:toNumber() / 100) * Max
        }
        
        return 0
    }
    
    #PROPERTIES:
    function table table:dMetadata() {
        if(!This:exists("metadata")) {
            This["metadata", table] = table(
                "position" = vec2(),
                "size" = vec2(),
                "remove" = 0,
                "children" = table(
                    "name" = table()
                )
            )
        }
        
        return This["metadata", table]
    }
    
    function table table:dMetadata(Parent:table) {
        local Metadata = This:dMetadata()
        Metadata["parent", table] = Parent
        return Metadata
    }
    
    function table table:dParent() {
        local Metadata = This:dMetadata()
        
        if(!Metadata:exists("parent")) {
            error("element has no parent")
        }
        
        return Metadata["parent", table]
    }
    
    function number table:dId() {
        local Metadata = This:dMetadata()
        
        if(!Metadata:exists("id")) {
            Metadata["id", number] = dNewId()
        }
        
        return Metadata["id", number]
    }
    
    function table table:dChildren() {
        return This["children", table]
    }
    
    function string table:dName() {
        return This["name", string]
    }
    
    function string table:dType() {
        return This["type", string]
    }
    
    function void table:dName(Name:string) {
        if(This["metadata", table]:exists("parent")) {
            local ChildrenByName = This:dParent():dMetadata():dChildren()["name", table]
            
            #remove old name
            if(ChildrenByName["name", table]:exists(This:dName())) {
                ChildrenByName["name", table]:remove(This:dName())
            }
            
            #set new name
            ChildrenByName[Name, table] = This
        }
        
        This["name", string] = Name
    }
    
    function void table:dRemove(Index:number) {
        try {
            local Parent = This:dParent()
            local ParentMetadata = Parent:dMetadata()
            
            local Children = Parent:dChildren()
            Children:removeTable(Index)
            
            local ChildrenByName = ParentMetadata:dChildren()["name", table]
            ChildrenByName:removeTable(This:dName())
        } catch(_) {}
        
        EGP_REMOVE:pushTable(This)
        dQueue()
    }
    
    function void table:dRemoveChildren() {
        local Children = This:dChildren()
        for(I = Children:count(), 1, -1) {
            Children[I, table]:dRemove(I)
        }
    }
    
    function table table:dGetChild(Index:number) {
        local Children = This:dChildren()
        
        if(Children:exists(Index)) {
            return Children[Index, table]
        } else {
            error("child(" + Index:toString() + ") not found in element")
        }
    }
    
    function table table:dGetChild(Name:string) {
        local ChildrenByName = This:dMetadata():dChildren()["name", table]
        
        if(ChildrenByName:exists(Name)) {
            return ChildrenByName[Name, table]
        } else {
            error("child('" + Name + "') not found in elemen.")
        }
    }
    
    #RENDERING:
    function void table:dRender() {
        local Metadata = This:dMetadata()
        
        This["type", string] = This:exists("type") ? 
            This["type", string] : "box"
        
        This["name", string] = This:exists("name") ? 
            This["name", string] : This["type", string]
            
        This["children", table] = This:exists("children") ? 
            This["children", table] : table()
        
        
        This["events", table] = This:exists("children") ? 
            This["events", table] : table(
                "press" = 0,
                "hover" = 0,
                "click" = 0,
                "release" = 0
            )
        
        This["position", table] = This:exists("position") ? 
            This["position", table] : table(
                "x" = "0",
                "y" = "0"
            )
        
        This["size", table] = This:exists("size") ? 
            This["size", table] : table(
                "width" = "100%",
                "height" = "100%"
            )
        
        This["colour", vector4] = This:exists("colour") ? 
            This["colour", vector4] : vec4(0,0,0,0)
        
        #ANGLE:
        This["angle", number] = This:exists("angle") ? 
            This["angle", number] : 0
        
        #RADIUS:
        switch(This["type", string]) {
            case "box",
                This["radius", number] = This:exists("radius") ? 
                    This["radius", number] : 0
            break
            default,
                if(This:exists("radius")) { This:remove("radius") }
            break
        }
        
        #FIDELITY:
        switch(This["type", string]) {
            case "box",
            case "circle",
                This["fidelity", number] = This:exists("fidelity") ? 
                    This["fidelity", number] : 3
            break
            default,
                if(This:exists("fidelity")) { This:remove("fidelity") }
            break
        }
        
        #OUTLINE:
        switch(This["type", string]) {
            case "box",
            case "circle",
                This["outline", number] = This:exists("outline") ? 
                    This["outline", number] : 0
            break
            default,
                if(This:exists("outline")) { This:remove("outline") }
            break
        }
        
        #THICKNESS:
        switch(This["type", string]) {
            case "box",
            case "circle",
                This["thickness", number] = This:exists("thickness") ? 
                    This["thickness", number] : 1
            break
            default,
                if(This:exists("thickness")) { This:remove("thickness") }
            break
        }
        
        #MATERIAL:
        switch(This["type", string]) {
            case "box",
            case "circle",
                This["material", string] = This:exists("material") ? 
                    This["material", string] : ""
                    
            break
            default,
                if(This:exists("material")) { This:remove("material") }
            break
        }
        
        #TEXT, FONT, ALIGN:
        switch(This["type", string]) {
            case "text",
                This["text", string] = This:exists("text") ? 
                    This["text", string] : ""
                    
                This["font", table] = This:exists("font") ? 
                    This["font", table] : table("font" = "ChatFont", "size" = 18)
                    
                This["align", vector2] = This:exists("align") ? 
                    This["align", vector2] : vec2(0,0)
            break
            default,
                if(This:exists("text")) { This:remove("text") }
                if(This:exists("font")) { This:remove("font") }
                if(This:exists("align")) { This:remove("align") }
            break
        }
        
        local Id = This:dId()
        local Type = This:dType()
        local Name = This:dName()
        
        if(!EGP_SCREEN:egpHasObject(Id)) {
            switch(Type) {
                case "box",
                    local Outline = This["outline", number]
                    local Radius = This["radius", number]
                    
                    if(Outline && Radius > 0) {
                        EGP_SCREEN:egpRoundedBoxOutline(Id, vec2(), vec2())
                    } elseif(Radius > 0) {
                        EGP_SCREEN:egpRoundedBox(Id, vec2(), vec2())
                    } elseif(Outline) {
                        EGP_SCREEN:egpBoxOutline(Id, vec2(), vec2())
                    } else {
                        EGP_SCREEN:egpBox(Id, vec2(), vec2())
                    }
                break
                case "circle",
                    local Outline = This["outline", number]
                    
                    if(Outline) {
                        EGP_SCREEN:egpCircleOutline(Id, vec2(), vec2())
                    } else {
                        EGP_SCREEN:egpCircle(Id,vec2(), vec2())
                    }
                break
                case "text",
                    EGP_SCREEN:egpTextLayout(Id, "", vec2(), vec2())
                break
                case "triangle",
                    EGP_SCREEN:egpTriangle(Id, vec2(0, -45), vec2(23, -45 + 23), vec2(-23, -45 + 23)) #TODO: fix this
                break
            }
            
            #EVENTS ------------------------------------------------------------------------:
            local Events = This["events", table]
            if(Events["press", number]) {
                EGP_EVENT["press", table]:pushTable(This)
            }
            
            if(Events["hover", number]) {
                EGP_EVENT["hover", table]:pushTable(This)
            }
            
            if(Events["click", number]) {
                EGP_EVENT["click", table]:pushTable(This)
            }
            
            if(Events["release", number]) {
                EGP_EVENT["release", table]:pushTable(This)
            }
        }
        
        #PARENTING ------------------------------------------------------------------------:
        local ParentId = 0
        try {
            local Parent = This:dParent()
            ParentId = Parent:dId()
            
            local ParentMetadata = Parent:dMetadata()
            
            local ChildrenByName = ParentMetadata:dChildren()["name", table]
            ChildrenByName[Name, table] = This
            
            if(EGP_SCREEN:egpParent(Id) != ParentId) {
                EGP_SCREEN:egpParent(Id, ParentId)
            }
        } catch(_) {}
        
        #POSITION ------------------------------------------------------------------------:
        local PositionData = This["position", table]
        local X = 0
        local Y = 0
        
        if(ParentId > 0) {
            local ParentSize = EGP_SCREEN:egpSize(ParentId)
            
            local Types = PositionData:typeids()
            X = Types["x", string] == "n" ? dValue(PositionData["x", number], 512) : dValue(PositionData["x", string], ParentSize:x())
            Y = Types["y", string] == "n" ? dValue(PositionData["y", number], 512) : dValue(PositionData["y", string], ParentSize:y())
            
            local ParentMetadata = This:dParent():dMetadata()
            Metadata["position", vector2] = ParentMetadata["position", vector2] + vec2(X, Y)
            
            #offset final position from parent's center
            X -= ParentSize:x() / 2
            Y -= ParentSize:y() / 2
        } else {
            local Types = PositionData:typeids()
            X = Types["x", string] == "n" ? dValue(PositionData["x", number], 512) : dValue(PositionData["x", string], 512)
            Y = Types["y", string] == "n" ? dValue(PositionData["y", number], 512) : dValue(PositionData["y", string], 512)
            Metadata["position", vector2] = vec2(X, Y)
        }
        EGP_SCREEN:egpPos(Id, vec2(X, Y))
        
        #SIZE ------------------------------------------------------------------------:
        local SizeData = This["size", table]
        local W = 0
        local H = 0
        
        if(ParentId > 0) {
            local ParentSize = EGP_SCREEN:egpSize(ParentId)
            local Types = SizeData:typeids()
            W = Types["width", string] == "n" ? dValue(SizeData["width", number], 512) : dValue(SizeData["width", string], ParentSize:x())
            H = Types["height", string] == "n" ? dValue(SizeData["height", number], 512) : dValue(SizeData["height", string], ParentSize:y())
            Metadata["size", vector2] = vec2(W, H)
        } else {
            local Types = SizeData:typeids()
            W = Types["width", string] == "n" ? dValue(SizeData["width", number], 512) : dValue(SizeData["width", string], 512)
            H = Types["height", string] == "n" ? dValue(SizeData["height", number], 512) : dValue(SizeData["height", string], 512)
            Metadata["size", vector2] = vec2(W, H)
        }
        EGP_SCREEN:egpSize(Id, vec2(W, H))
        
        #COLOUR ------------------------------------------------------------------------:
        local Colour = This["colour", vector4]
        EGP_SCREEN:egpColor(Id, Colour)
        
        local Angle = This["angle", number]
        EGP_SCREEN:egpAngle(Id, Angle)
        
        #TEXT ------------------------------------------------------------------------:
        if(Type == "text") {
            local Font = This["font", table]["font", string]
            local FontSize = This["font", table]["size", number]
            local Align = This["align", vector2]     
            
            EGP_SCREEN:egpSetText(Id, This["text", string])
            EGP_SCREEN:egpFont(Id, Font, FontSize > 0 ? FontSize : H)
            EGP_SCREEN:egpAlign(Id, Align:x(), Align:y())
        }
        
        #MATERIAL ------------------------------------------------------------------------:
        
        EGP_SCREEN:egpMaterial(Id, This["material", string])
        
        #THICKNESS ------------------------------------------------------------------------:
        if(This:exists("thickness")) {
            EGP_SCREEN:egpSize(Id, This["thickness", number])
        }
        
        #CHILDREN:
        local Children = This:dChildren()
        for(I = 1, Children:count()) {
            local Child = Children[I, table]
            local ChildMetadata = Child:dMetadata(This)
            dQueueAfter(Child, I)
        }
    }
    
    function table:dSetText(Text:string) {
        This["text", string] = Text
    }
    
    function table:dSetColour(Colour:vector4) {
        This["colour", vector4] = Colour
    }
    
    dWire()
    eventSend("egp_looking_at", 0, table())
    
    EGP_EVENT["press", table] = table()
    EGP_EVENT["hover", table] = table()
    EGP_EVENT["click", table] = table()
    EGP_EVENT["release", table] = table()
    EGP_EVENT["update", table] = table()
}

#fix for emitters not getting player cursor correctly
if(EGP_SCREEN & ~EGP_SCREEN) {
    if(EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter") {
        eventSend("egp_looking_at", 0, table())
    }
}

if(eventClk("egp_looking_at")) {
    if(!dRendering()) {
        foreach(_:number, Player:entity = players()) {
            local LookingAtScreen = 0
            if(owner():pos():distance(EGP_SCREEN:entity():pos()) <= 150) {
                local CursorPos = EGP_SCREEN:egpCursor(Player)
                if(CursorPos:x() >= 0 && CursorPos:x() <= 512 && CursorPos:y() >= 0 && CursorPos:y() <= 512) {
                    LookingAtScreen = 1
                }
            }
            
            if(LookingAtScreen) {
                runOnKeys(Player, 1)
            } else {
                runOnKeys(Player, 0)
            }
        }
    }
    
    if(EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter") {
        eventSend("egp_looking_at", 250, table())
    }
}

#handles screen & emmiter clicks
if((EGP_USER & ~EGP_USER) || (EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter" && keyClk():isPlayer())) {
    if(EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter") {
        if((keyClkPressedBind() == "use" || (keyClk():inVehicle() && keyClkPressedBind() == "attack")) && keyClk(keyClk()) == 1) {
            USER = keyClk()
        }
    } else {
        USER = EGP_USER
    }
    
    if(USER:isValid() && USER:isPlayer() && (EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter" ? ((keyClkPressedBind() == "use" || (keyClk():inVehicle() && keyClkPressedBind() == "attack")) && keyClk(keyClk()) == 1) : 1)) {
        if(!dRendering()) {
            local Cursor = EGP_SCREEN:egpCursor(USER)
            
            eventSend("screen:press", table())
            
            for(I = EGP_EVENT["press", table]:count(), 1, -1) {
                local Target = EGP_EVENT["press", table][I, table]
                
                if(Target["disabled", number] != 1) {
                    local Metadata = Target:dMetadata()
                    local Position = Metadata["position", vector2]
                    local Size = Metadata["size", vector2]
                    
                    if(inrange(Cursor:x(), Position:x(), Position:x() + Size:x())) {
                        if(inrange(Cursor:y(), Position:y(), Position:y() + Size:y())) {
                            eventSend(Target["name", string] + ":press", Target)
                        }
                    }
                }
            }
        }
    }
}

#handles drawing so we don't exceed tickquota
if(dQueueClk()) {
    if(EGP_REMOVE:count() > 0) {
        while(EGP_REMOVE:count() > 0 && perf(99)) {
            local Object = EGP_REMOVE:removeTable(1)
            
            dFreeId(Object:dId())
            
            for(I = EGP_EVENT["press", table]:count(), 1, -1) {
                if(EGP_EVENT["press", table][I, table] == Object) {
                    EGP_EVENT["press", table]:removeTable(I)
                    break
                }
            }
            
            local Children = Object:dChildren()
            for(I = Children:count(), 1, -1) {
                EGP_REMOVE:pushTable(Children[I, table])
            }
        }
        
        dQueue()
    } else {
        if(EGP_QUEUE:count() > 0) {
            while(EGP_QUEUE:count() > 0 && perf(99)) {
                EGP_QUEUE:removeTable(1):dRender()
            }
            
            dQueue()
        }
    }
}
