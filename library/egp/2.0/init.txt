@persist EGP_FREE:array EGP_USED:array 
@persist EGP_QUEUE:table EGP_QUEUED:number
@persist EGP_ROOT:table
@persist EGP_NAME:table

#include "library/number"
#include "library/string"
#include "library/array"
#include "library/table"
#include "library/egp"
#include "library/event/1.0/init"
#include "library/property"

if(first() || dupefinished()) {
    EGP_FREE = array()
    EGP_USED = array()
    EGP_QUEUE = table()
    EGP_QUEUED = 0
    EGP_ROOT = table()
    EGP_NAME = table()
    
    #MEMORY:
    function number dNewId() {
        if(EGP_FREE:count() == 0) {
            local TOTAL = (EGP_FREE:count() + EGP_USED:count()) + 1
            
            if(TOTAL < egpMaxObjects()) {
                local ID = TOTAL
                EGP_USED:pushNumber(ID)
                return ID
            }
        } else {
            local ID = EGP_FREE:removeNumber(1)
            EGP_USED:pushNumber(ID)
            return ID
        }
        
        return -1
    }
    
    function void dFreeId(ID:number) {
        local LkupUsed = invert(EGP_USED)
        
        if(LkupUsed:exists(ID:toString())) {
            EGP_USED:removeNumber(LkupUsed[ID:toString(), number])
            EGP_FREE:pushNumber(ID)
            EGP_SCREEN:egpRemove(ID)
        }
    }
    
    #QUEUING:
    function void dQueue() {
        if(EGP_QUEUED == 0) {
            eEventPush("egp_queue", 1)
        }
        
        EGP_QUEUED = 1
    }
    
    function table dQueue(Object:table) {
        dQueue()
        EGP_QUEUE:pushTable(Object)
        return Object
    }
    
    function table dQueueNext(Object:table) {
        dQueue()
        EGP_QUEUE:insertTable(1, Object)
        return Object
    }
    
    function table dQueueNext(Object:table, K:number) {
        dQueue()
        EGP_QUEUE:insertTable(K, Object)
        return Object
    }
    
    function number dQueueClk() {
        return eEventClk("egp_queue")
    }
    
    function number dRendering() {
        return EGP_QUEUE:count() > 0
    }
    
    #HELPERS:
    function number dValue(Value:number, _:number) {
        return Value
    }
    
    function number dValue(Value:string, Max:number) {
        local Absolute = Value:match("^(-*%d+)$")
        if(Absolute[1, string] == "") {
            Absolute = Value:match("^(-*%d+)px$")
        }
        
        if(Absolute[1, string] != "") {
            return Absolute[1, string]:toNumber()
        }
        
        local Percent = Value:match("^(-*%d+)%%$")
        if(Percent[1, string] == "") {
            Percent = Value:match("^(-*%d+%.%d+)%%$")
        }
        
        if(Percent[1, string] != "") {
            return (Percent[1, string]:toNumber() / 100) * Max
        }
        
        return 0
    }
    
    #PROPERTIES:
    function table table:dMetadata() {
        if(!This:exists("metadata")) {
            This["metadata", table] = table(
                "id" = dNewId(),
                "path" = "",
                "position" = vec2(),
                "size" = vec2(),
                "children" = table(
                    "name" = table()
                ),
                "delete" = 0,
                "dirty" = 0
            )
        }
        
        return This["metadata", table]
    }
    
    function table table:dMetadata(Parent:table) {
        local Metadata = This:dMetadata()
        Metadata["parent", table] = Parent
        return Metadata
    }
    
    function void table:dDirty() {
        local Metadata = This:dMetadata()
        if(Metadata["dirty", number] == 0) {
            Metadata["dirty", number] = 1
            dQueue(This)
        }
    }
    
    function table table:dParent() {
        local Metadata = This:dMetadata()
        
        if(!Metadata:exists("parent")) {
            error("element has no parent")
        }
        
        return Metadata["parent", table]
    }
    
    function number table:dId() {
        local Metadata = This:dMetadata()
        
        if(!Metadata:exists("id")) {
            Metadata["id", number] = dNewId()
        }
        
        return Metadata["id", number]
    }
    
    function void table:dIndex(Index:number) {
        local Metadata = This:dMetadata()
        Metadata["index", number] = Index
    }
    
    function number table:dIndex() {
        return This:dMetadata()["index", number]
    }
    
    function string table:dType() {
        return This["type", string]
    }
    
    function table table:dChildren() {
        if(!This:exists("children")) {
            This["children", table] = table()
        }
        
        return This["children", table]
    }
    
    function string table:dName() {
        return This["name", string]
    }
    
    function void table:dName(NewName:string) {
        if(This["metadata", table]:exists("parent")) {
            local ChildrenByName = This:dParent():dMetadata():dChildren()["name", table]
            
            #remove old name
            local OldName = This:dName()
            if(ChildrenByName["name", table]:exists(OldName)) {
                ChildrenByName["name", table]:remove(OldName)
            }
            
            #set new name
            ChildrenByName[NewName, table] = This
            
            This:dDirty()
        }
        
        This["name", string] = NewName
    }
    
    function table table:dGetChild(Index:number) {
        local Children = This:dChildren()
        
        if(Children:exists(Index)) {
            return Children[Index, table]
        } else {
            error("child(" + Index:toString() + ") not found in element")
        }
    }
    
    function table dBody() {
        return EGP_ROOT
    }
    
    function table dGetElement(Path:string) {
        if(EGP_NAME:exists(Path)) {
            return EGP_NAME[Path, table]
        }
        
        error("element('" + Path + "') not found")
    }
    
    function table table:dGetChild(Name:string) {
        local ChildrenByName = This:dMetadata():dChildren()["name", table]
        
        if(ChildrenByName:exists(Name)) {
            return ChildrenByName[Name, table]
        } else {
            error("child('" + Name + "') not found in element")
        }
    }
    
    function table table:dGetFirstChild() {
        local Children = This:dChildren()
        
        if(Children:count() > 0) {
            return Children[1, table]
        } else {
            error("element has not children")
        }
    }
    
    function table table:dGetLastChild() {
        local Children = This:dChildren()
        
        if(Children:count() > 0) {
            return Children[Children:count(), table]
        } else {
            error("element has not children")
        }
    }
    
    function void table:dPush(Child:table) {
        local Children = This:dChildren()
        Children:pushTable(Child)
        Child:dMetadata(This)
        Child:dIndex(Children:count())
        dQueue(Child)
    }
    
    function table:dDelete() {
        local Metadata = This:dMetadata()
        Metadata["delete", number] = 1
        
        try {
            local Parent = This:dParent()
            local ParentChildren = Parent:dChildren()
            ParentChildren:removeTable(This:dIndex())
            
            for(I = This:dIndex(), ParentChildren:count()) {
                ParentChildren[I, table]:dIndex(I)
            }
            
            local Name = This:dName()
            if(Name != "") {
                local ParentChildrenByName = Parent:dChildren()["name", table]
                if(ParentChildrenByName:exists(Name)) {
                    ParentChildrenByName:remove(Name)
                }
            }
        } catch(_) {}
        
        This:dDirty()
    }
    
    function table:dPos(Position:table) {
        This["position", table] = Position
        This:dDirty()
    }
    
    function table:dPos(Position:vector2) {
        This["position", vector2] = Position
        This:dDirty()
    }
    
    function vector2 table:dPos() {
        return This["metadata", table]["position", vector2]
    }
    
    function table:dSize(Size:table) {
        This["size", table] = Size
        This:dDirty()
    }
    
    function table:dSize(Size:vector2) {
        This["size", vector2] = Size
        This:dDirty()
    }
    
    function vector2 table:dSize() {
        return This["metadata", table]["size", vector2]
    }
    
    function table table:dProperties() {
        local TypeIds = This:typeids()
        
        local Type = This:dProperty(TypeIds, "type", "box", 0)
        This:dProperty(TypeIds, "name", Type, 0)
        
        if(!This:exists("children") || TypeIds["children", string] != "t") {
            This["children", table] = table()
        }
        
        if(!This:exists("position")) {
            This:dProperty(TypeIds, "position", vec2(), 0)
        } else {
            if(TypeIds["position", string] == "t") {
                This:dProperty(TypeIds, "position", table("x" = 0, "y" = 0), 0)
            } elseif(TypeIds["position", string] != "xv2") {
                This:dProperty(TypeIds, "position", vec2(), 0)
            }
        }
        
        if(!This:exists("size")) {
            This:dProperty(TypeIds, "size", table("width" = "100%", "height" = "100%"), 0)
        } else {
            if(TypeIds["size", string] == "t") {
                This:dProperty(TypeIds, "size", table("width" = "100%", "height" = "100%"), 0)
            } elseif(TypeIds["size", string] != "xv2") {
                This:dProperty(TypeIds, "size", vec2(), 0)
            }
        }
        
        This:dProperty(TypeIds, "colour", vec4(), 0)
        This:dProperty(TypeIds, "angle", 0, 0)
        This:dProperty(TypeIds, "rounded", 0, Type != "box")
        This:dProperty(TypeIds, "outline", 0, Type != "box" && Type != "circle")
        This:dProperty(TypeIds, "thickness", 0, Type != "box" && Type != "circle")
        This:dProperty(TypeIds, "material", "", Type != "box")
        
        This:dProperty(TypeIds, "text", "", Type != "text")
        This:dProperty(TypeIds, "font", table("font" = "", "size" = 18), Type != "text")
        This:dProperty(TypeIds, "align", vec2(0,0), Type != "text")
        
        return This:typeids()
    }
    
    function table:dList(List:table, Method:string, Max:number, Start:number) {
        if(This:dChildren():count() > List:count()) {
            for(I = This:dChildren():count(), List:count() + 1, -1) {
                This:dGetChild(I):dDelete()
            }
        }
        
        for(I = 1, min(List:count(), Max)) {
            local ListItem = List[Start + I, table]
            
            if(I <= This:dChildren():count()) {
                local Child = This:dGetChild(I)
                Method(Child, ListItem, I, List)
                Child:dDirty()
            } else {
                This:dPush(Method(notable(), ListItem, I, List)[table])
            }
        }
    }
    
    function table:dList(List:table, Method:string, Max:number) {
        This:dList(List, Method, Max, 0)
    }
    
    function table:dList(List:table, Method:string) {
        This:dList(List, Method, List:count(), 0)
    }
    
    #RENDERING:
    function void table:dDraw() {
        local Metadata = This:dMetadata()
        Metadata["dirty", number] = 0
        
        local Id = This:dId()
        local Type = This["type", string]
        local Name = This["name", string]
        
        try {
            local ParentMetadata = This:dParent():dMetadata()
            Metadata["delete", number] = Metadata["delete", number] || ParentMetadata["delete", number]
        } catch(_) {}
        local Delete = Metadata["delete", number]
        
        if(Delete) {
            dFreeId(Id)
        } else {
            #EGP OBJECT ------------------------------------------------------------------------:
            if(!EGP_SCREEN:egpHasObject(Id) || (EGP_SCREEN:egpHasObject(Id) && EGP_SCREEN:egpObjectType(Id) != Type)) {
                switch(Type) {
                    case "box",
                        local Outline = This["outline", number]
                        local Rounded = This["rounded", number]
                        
                        if(Outline && Rounded) {
                            EGP_SCREEN:egpRoundedBoxOutline(Id, vec2(), vec2())
                        } elseif(Rounded) {
                            EGP_SCREEN:egpRoundedBox(Id, vec2(), vec2())
                        } elseif(Outline) {
                            EGP_SCREEN:egpBoxOutline(Id, vec2(), vec2())
                        } else {
                            EGP_SCREEN:egpBox(Id, vec2(), vec2())
                        }
                    break
                    case "circle",
                        local Outline = This["outline", number]
                        
                        if(Outline) {
                            EGP_SCREEN:egpCircleOutline(Id, vec2(), vec2())
                        } else {
                            EGP_SCREEN:egpCircle(Id,vec2(), vec2())
                        }
                    break
                    case "text",
                        EGP_SCREEN:egpTextLayout(Id, "", vec2(), vec2())
                    break
                }
            }
            
            #PARENTING ------------------------------------------------------------------------:
            local ParentId = 0
            try {
                local Parent = This:dParent()
                ParentId = Parent:dId()
                
                local ParentMetadata = Parent:dMetadata()
                
                local ChildrenByName = ParentMetadata:dChildren()["name", table]
                ChildrenByName[Name, table] = This
                
                if(Name != "") {
                    local Path = (ParentMetadata["path", string] == "" ? "" : ParentMetadata["path", string] + ".") + Parent:dName()
                    if(Metadata["path", string] != "") {
                        if(EGP_NAME:exists(Metadata["path", string])) {
                            if(Metadata["path", string] != Path) {
                                EGP_NAME:removeTable(Metadata["path", string])
                            }
                        }
                    }
                    
                    Metadata["path", string] = Path
                    
                    local FullPath = Path + "." + Name
                    EGP_NAME[FullPath, table] = This
                }
                
                if(EGP_SCREEN:egpParent(Id) != ParentId) {
                    EGP_SCREEN:egpParent(Id, ParentId)
                }
            } catch(_) {}
            
            #PROPERTIES ------------------------------------------------------------------------:
            local TypeIds = This:dProperties()
            
            #POSITION ------------------------------------------------------------------------:
            local X = 0
            local Y = 0
            
            if(ParentId > 0) {
                local ParentSize = EGP_SCREEN:egpSize(ParentId)
                
                if(TypeIds["position", string] == "xv2") {
                    local Position = This["position", vector2]
                    X = Position:x()
                    Y = Position:y()
                } elseif(TypeIds["position", string] == "t") {
                    local PositionData = This["position", table]
                    local PositionTypeIds = PositionData:typeids()
                    X = PositionTypeIds["x", string] == "n" ? dValue(PositionData["x", number], 512) : dValue(PositionData["x", string], ParentSize:x())
                    Y = PositionTypeIds["y", string] == "n" ? dValue(PositionData["y", number], 512) : dValue(PositionData["y", string], ParentSize:y())
                }
                
                local ParentMetadata = This:dParent():dMetadata()
                Metadata["position", vector2] = ParentMetadata["position", vector2] + vec2(X, Y)
                
                #offset final position from parent's center
                X -= ParentSize:x() / 2
                Y -= ParentSize:y() / 2
            } else {
                if(TypeIds["position", string] == "xv2") {
                    local Position = This["position", vector2]
                    X = Position:x()
                    Y = Position:y()
                } elseif(TypeIds["position", string] == "t") {
                    local PositionData = This["position", table]
                    local PositionTypeIds = PositionData:typeids()
                    X = PositionTypeIds["x", string] == "n" ? dValue(PositionData["x", number], 512) : dValue(PositionData["x", string], 512)
                    Y = PositionTypeIds["y", string] == "n" ? dValue(PositionData["y", number], 512) : dValue(PositionData["y", string], 512)
                }
                
                Metadata["position", vector2] = vec2(X, Y)
            }
            EGP_SCREEN:egpPos(Id, vec2(X, Y))
            
            #SIZE ------------------------------------------------------------------------:
            local SizeData = This["size", table]
            local W = 0
            local H = 0
            local PW = 512
            local PH = 512
            
            if(ParentId > 0) {
                local ParentSize = EGP_SCREEN:egpSize(ParentId)
                PW = ParentSize:x()
                PH = ParentSize:y()
            }
            
            if(TypeIds["size", string] == "xv2") {
                local Size = This["size", vector2]
                W = Size:x()
                H = Size:y()
            } elseif(TypeIds["size", string] == "t") {
                local SizeTypesIds = SizeData:typeids()
                W = SizeTypesIds["width", string] == "n" ? dValue(SizeData["width", number], 512) : dValue(SizeData["width", string], PW)
                H = SizeTypesIds["height", string] == "n" ? dValue(SizeData["height", number], 512) : dValue(SizeData["height", string], PH)
            }
            
            Metadata["size", vector2] = vec2(W, H)
            EGP_SCREEN:egpSize(Id, vec2(W, H))
            
            #COLOUR ------------------------------------------------------------------------:
            local Colour = This["colour", vector4]
            EGP_SCREEN:egpColor(Id, Colour)
            
            #ANGLE
            local Angle = This["angle", number]
            EGP_SCREEN:egpAngle(Id, Angle)
            
            #TEXT ------------------------------------------------------------------------:
            if(Type == "text") {
                local Font = This["font", table]["font", string]
                local FontSize = This["font", table]["size", number]
                local Align = This["align", vector2]     
                
                EGP_SCREEN:egpSetText(Id, This["text", string])
                EGP_SCREEN:egpFont(Id, Font, FontSize > 0 ? FontSize : H)
                EGP_SCREEN:egpAlign(Id, Align:x(), Align:y())
            }
            
            #MATERIAL ------------------------------------------------------------------------:
            EGP_SCREEN:egpMaterial(Id, This["material", string])
            
            #THICKNESS ------------------------------------------------------------------------:
            if(This["outline", number] == 1 && This["thickness", number] > 0) {
                EGP_SCREEN:egpSize(Id, This["thickness", number])
            }
        }
        
        #CHILDREN:
        local Children = This:dChildren()
        for(I = 1, Children:count()) {
            local Child = Children[I, table]
            Child:dMetadata(This)
            Child:dIndex(I)
            dQueueNext(Child, I)
        }
    }
    
    egpWire()
    
    EGP_ROOT = table(
        "name" = "body",
        "type" = "box",
        "position" = table(
            "x" = 0,
            "y" = 0
        ),
        "size" = table(
            "width" = 512,
            "height" = 512
        ),
        "children" = table()
    )
    eEventPush("document.ready", 0, EGP_ROOT)
}

if(eEventClk("document.ready")) {
    eEventGetPayload():dDirty()
}

#handles screen & emmiter presses
#fixes egp emitter issue
event keyPressed(Player:entity, _:string, KeyPressed:number, KeyBind:string) {
    if(EGP_SCREEN:entity():type() == "gmod_wire_egp_emitter") {
        if(!dRendering()) {
            if(Player:pos():distance(EGP_SCREEN:entity():pos()) <= 150) {
                local CursorPos = EGP_SCREEN:egpCursor(Player)
                if(CursorPos:x() >= 0 && CursorPos:x() <= 512 && CursorPos:y() >= 0 && CursorPos:y() <= 512) {
                    if(KeyPressed == 1) {
                        if(KeyBind == "use" || (Player:inVehicle() && KeyBind == "attack")) {
                            eEventPush("mouse.press", 1, table(
                                "player" = Player,
                                "cursor" = EGP_SCREEN:egpCursor(Player)
                            ))
                        }
                    }
                }
            }
        }
    }
}

if(EGP_SCREEN:entity():type() != "gmod_wire_egp_emitter") {
    if(EGP_USER & ~EGP_USER) {
        if(!dRendering()) {
            if(EGP_USER:isValid() && EGP_USER:isPlayer()) {
                eEventPush("mouse.press", 1, table(
                    "player" = EGP_USER,
                    "cursor" = EGP_SCREEN:egpCursor(EGP_USER)
                ))
            }
        }
    }
}

#handles drawing so we don't exceed tickquota
if(dQueueClk()) {
    if(EGP_QUEUE:count() > 0) {
        while(EGP_QUEUE:count() > 0 && perf(99)) {
            EGP_QUEUE:removeTable(1):dDraw()
        }
        
        EGP_QUEUED = 0
        dQueue()
    } else {
        EGP_QUEUED = 0
    }
}
