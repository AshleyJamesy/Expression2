@name library/http

#ifdef httpClk()
    #error http extension is already enabled on the server
#endif

#ifndef runOnFile(n)
    #error http library needs file extension enabled!
#endif

#[
    import os, time
    import re
    import requests
    import json
    
    def request(directory, filename):
        filepath = os.path.join(directory, filename)
        f = open(filepath)
        data = json.load(f)
        f.close()
        os.remove(filepath)
        
        url = data["url"]
        
        response = None
        match data["method"]:
            case "GET":
                print("GET: " + url)
                response = requests.get(url)
            case "POST":
                print("POST: " + url)
                print(data["headers"])
                print(data["body"])
                response = requests.post(url, data=data["body"], headers=data["headers"])
        
        if(response != None):
            filepath = os.path.join(directory, re.sub("^(\d+)\.json$", "\\1-complete.json", filename))
            with open(filepath, "w") as outfile:
                json.dump(
                    {
                        "status": response.status_code,
                        "reason": response.reason,
                        "body": response.text
                    }, outfile, indent=4)
    
    def run(directory):
        for filename in os.listdir(directory):
            filepath = os.path.join(directory, filename)
            
            if os.path.isfile(filepath):
                if(re.search("^\d+\.json$", filename) != None):
                    request(directory, filename)
                
                if(re.search("^\d+\-complete.json$", filename) != None):
                    if(os.stat(filepath).st_size == 0):
                        os.remove(filepath)
    
    while(1):
        run("<PATH TO /garrysmod/data/e2files/requests/>")
        time.sleep(1)
]#

@persist LIB_HTTP:table

if(first() | dupefinished()) {
    runOnFile(1)
    
    LIB_HTTP = table(
        "queue" = table(),
        "clk" = 0,
        "clkname" = "",
        "clkdata" = table()
    )
}

function void httpRequest(Name:string, Type:string, Url:string, Headers:table, Body:string) {
    local Queue = LIB_HTTP["queue", table]
    Queue:pushTable(table(
        "name" = Name,
        "url" = Url,
        "method" = Type:upper(),
        "headers" = Headers,
        "body" = Body
    ))
    timer("library.http.queue", 0)
}

function void httpRequest(Name:string, Type:string, Url:string, Headers:table) {
    httpRequest(Name, Type, Url, Headers, "")
}

function number httpClk() {
    return LIB_HTTP["clk", number]
}

LIB_HTTP["clk", number] = 0
LIB_HTTP["clkname", string] = ""
LIB_HTTP["clkdata", string] = ""

if(clk("library.http.queue")) {
    local Queue = LIB_HTTP["queue", table]
    if(Queue:count() > 0) {
        if(fileCanWrite()) {
            fileWrite("http-requests-", jsonEncode(Queue, 1))
        } else {
            timer("library.http.queue", 1000) #can't write file now, try again in 1s
        }
    }
}

if(fileClk()) {
    switch(fileStatus()) {
        case _FILE_OK,
            fileWrite(fileName(), "") #zero bytes, python will remove it
        break
        case _FILE_404,
        case _FILE_TIMEOUT,
        case _FILE_TRANSFER_ERROR,
        case _FILE_UNKNOWN,
            
        break
        default,
        break
    }
}
