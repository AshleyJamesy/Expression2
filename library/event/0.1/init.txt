@persist EVENT_ID:number EVENT_QUEUE:table HASH:string

#include "library/number"
#include "library/string"
#include "library/array"

if(first() || dupefinished()) {
    function number eventClk() {
        return dsClk() && dsClkName():startsWith(HASH + ":event:")
    }
    
    function string eventClkName() {
        return dsClkName():sub((HASH + ":event:"):length() + 1, dsClkName():length())
    }
    
    function number eventClk(Event:string) {
        return dsClk(HASH + ":event:" + Event)
    }
    
    function number eventSend(Event:string, Time:number, Payload:table) {
        if(Time > 0) {
            local Timer = table(
                "event" = Event,
                "payload" = Payload
            )
            
            local TimerId = HASH + ":event:timer#" + EVENT_ID
            EVENT_ID++
            EVENT_QUEUE[TimerId, table] = Timer
            timer(TimerId, Time)
            
            return 1
        } else {
            return dsSendDirect(HASH + ":event:" + Event, entity(), Payload)
        }
        
        return 0
    }
    
    function number eventSend(Event:string, Table:table) {
        return eventSend(Event, 0, Table)
    }
    
    function table eventGetPayload() {
        if(!eventClk()) {
            return table()
        }
        
        return dsGetTable()
    }
    
    HASH = hashNoComments():toString()
}

if(clkName():startsWith(HASH + ":event:")) {
    local TimerId = clkName()
    if(EVENT_QUEUE:exists(TimerId)) {
        local Event = EVENT_QUEUE[TimerId, table]
        EVENT_QUEUE:remove(TimerId)
        eventSend(Event["event", string], 0, Event["payload", table])
    }
}
